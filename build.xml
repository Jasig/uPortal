<!--
 | Detailed help documenation lives in docs/antHelp.txt, please refer to this file or
 | run 'ant help' for usage of this file.
 |
 | Comments in this file should be targeted to the maintenance of the build script.
 +-->
<project name="uPortal" default="help" basedir="." xmlns:up="urn:up-util-ant" xmlns:artifact="urn:maven-artifact-ant">
    <fail message="The nested macros in this build.xml do not work with '${ant.version}', the current recommended version is 1.6.5">
        <condition>
            <contains string="${ant.version}" substring="1.7.0" />
        </condition>
    </fail>
    <fail message="build.properties does not exist, please copy build.properties.sample and fill in your settings.">
        <condition>
            <not>
                <available file="${basedir}/build.properties" />
            </not>
        </condition>
    </fail>

    <!--
     | Load the build properties before the next fail tests since they check properties provided
     | by the file.
     +-->
    <property file="${basedir}/build.properties" />
    
    <fail message="server.base build property must be set.">
        <condition>
            <not>
                <isset property="server.base" />
            </not>
        </condition>
    </fail>
    <fail message="The server.base build property refers to a non-existant location '${server.base}'">
        <condition>
            <not>
                <available file="${server.base}" type="dir" />
            </not>
        </condition>
    </fail>

    <!--
     | Properties that describe the maven project
     +-->
    <property name="bootstrap.dir" value="${basedir}/bootstrap" />
    <property name="uportal-impl.dir" value="${basedir}/uportal-impl" />
    <property name="uportal-war.dir" value="${basedir}/uportal-war" />
    <property name="uportal-portlets-overlay.dir" value="${basedir}/uportal-portlets-overlay" />
    <property name="uportal-ear.dir" value="${basedir}/uportal-ear" />
    <property name="uportal-ear-deployer.dir" value="${basedir}/uportal-ear-deployer" />
    <property name="uportal-ant-tasks.dir" value="${basedir}/uportal-ant-tasks" />
    
    <import file="${bootstrap.dir}/build_includes.xml" />


    <!-- ============================== Public Targets ============================== -->

    <target name="help" description="Prints information about using this ant build file.">
        <loadfile property="helpMessage" srcFile="docs/antHelp.txt" />
        <echo message="${helpMessage}" />
    </target>

    <target name="initportal" description="Runs all the targets necessary to deploy the portal and prepare the portal database">
        <echo message="Initializing uPortal" />
        <antcall target="deploy-ear" />
        <antcall target="db" />
        <antcall target="db-hibernate" />
        <antcall target="i18n-db" />
        <antcall target="crn-import">
            <param name="dir" value="uportal-impl/src/main/resources/properties/db/entities" />
        </antcall>
        <echo message="Finished initializing uPortal" />
    </target>
    
    <target name="db-hibernate" description="Drops then creates Hibernate managed tables">
        <uportal-impl-macro>
            <artifact:dependencies pathid="hibernate-tools.classpath" verbose="false">
                <pom file="${bootstrap.dir}/hibernate-tools-pom.xml" />
            </artifact:dependencies>
            
            <path id="hibernate-tools.classpath.full">
                <path refid="hibernate-tools.classpath" />
                <path refid="uportal-impl-full.classpath" />
            </path>
            
            <taskdef classname="org.hibernate.tool.ant.HibernateToolTask" name="hibernatetool">
                <classpath refid="hibernate-tools.classpath.full" />
            </taskdef>
            
            <mkdir dir="${basedir}/target/hibernate" />
            <hibernatetool destdir="${basedir}/target/hibernate">
                <classpath refid="hibernate-tools.classpath.full" />
                
                <annotationconfiguration 
                    configurationfile="${basedir}/uportal-impl/src/main/resources/properties/db/hibernate.cfg.xml"
                    propertyfile="${basedir}/uportal-impl/src/main/resources/properties/rdbm.properties" />
                
                <hbm2ddl export="true" drop="true" />
            </hibernatetool>
        </uportal-impl-macro>
    </target>

    <target name="db" description="Loads database tables and data">
        <uportal-impl-macro>
            <property name="usetable" value=" " />
            <property name="tablefile" value=" " />
            <property name="usedata" value=" " />
            <property name="datafile" value=" " />
            <property name="createscript" value=" " />
            <property name="droptables" value=" " />
            <property name="createtables" value=" " />
            <property name="populatetables" value=" " />
            <property name="localeaware" value=" " />
            <property name="adminlocale" value=" " />

            <echo message="Invoking DbLoader" />
            <java fork="true" failonerror="true" dir="${uportal-impl.dir}" classname="org.jasig.portal.tools.dbloader.DbLoader">
                <sysproperty key="log4j.configuration" value="command-line.log4j.properties" />
                
                <classpath refid="uportal-impl-full.classpath" />

                <arg value="${usetable}" />
                <arg value="${tablefile}" />
                <arg value="${usedata}" />
                <arg value="${datafile}" />
                <arg value="${createscript}" />
                <arg value="${droptables}" />
                <arg value="${createtables}" />
                <arg value="${populatetables}" />
                <arg value="${localeaware}" />
                <arg value="${adminlocale}" />
            </java>
        </uportal-impl-macro>
    </target>

    <target name="i18n-db" description="Loads internationalization tables and data">
        <echo message="Invoking DbLoader for localizationed database setting" />
        <antcall target="db">
            <param name="usetable" value="-t" />
            <param name="tablefile" value="/properties/db/tables-i18n.xml" />
            <param name="usedata" value="-d" />
            <param name="datafile" value="/properties/db/data-i18n.xml" />
        </antcall>
    </target>

    <target name="l10n-db" description="Loads localized data">
        <echo message="Invoking DbLoader for localizationed database setting" />
        <antcall target="db">
            <param name="locale" value="en_US" />
            <param name="usetable" value="-t" />
            <param name="tablefile" value="/properties/db/tables-l10n.xml" />
            <param name="usedata" value="-d" />
            <param name="datafile" value="/properties/db/data-l10n.xml" />
            <param name="localeaware" value="-l" />
            <param name="adminlocale" value="en_US" />
        </antcall>
    </target>

    <target name="dbunload" description="Dumps a database table to a flat file in XML format">
        <uportal-impl-macro>
            <property name="tablename" value=" " />
            <property name="xmlfile" value=" " />

            <echo message="Invoking DbUnload" />
            <java fork="true" failonerror="true" dir="${basedir}" classname="org.jasig.portal.tools.dbloader.DbUnload">
                <sysproperty key="log4j.configuration" value="command-line.log4j.properties" />
                                
                <classpath refid="uportal-impl-full.classpath" />

                <arg value="${tablename}" />
                <arg value="${xmlfile}" />
            </java>
        </uportal-impl-macro>
    </target>

    <target name="dbtest" description="Displays information about the database defined in rdbm.properties">
        <uportal-impl-macro>
            <echo message="Invoking DbTest" />
            <java fork="true" failonerror="true" dir="${basedir}" classname="org.jasig.portal.tools.DbTest">
                <sysproperty key="log4j.configuration" value="command-line.log4j.properties" />
                                
                <classpath refid="uportal-impl-full.classpath" />
            </java>
        </uportal-impl-macro>
    </target>

    <target name="pubchan" description="Publishes channels">
        <uportal-impl-macro>
            <!--
             | If no file or directory is specified, set a default directory
             +-->
            <if>
                <not>
                    <or>
                        <isset property="directory" />
                        <isset property="channel" />
                    </or>
                </not>
                <then>
                    <fail>
                        Either 'directory' or 'channel' must be set.
                    </fail>
                </then>
            </if>

            <!--
             | Set argument prefix properties if the argument value exists
             +-->
            <if>
                <isset property="directory" />
                <then>
                    <property name="directoryArg" value="-d" />
                </then>
                <else>
                    <property name="directoryArg" value="" />
                    <property name="directory" value="" />
                </else>
            </if>
            <if>
                <isset property="channel" />
                <then>
                    <property name="channelArg" value="-f" />
                </then>
                <else>
                    <property name="channelArg" value="" />
                    <property name="channel" value="" />
                </else>
            </if>

            <echo message="Invoking Channel Publisher Tool" />
            <java fork="true" failonerror="true" dir="${basedir}" classname="org.jasig.portal.tools.chanpub.ChannelPublisher">
                <sysproperty key="log4j.configuration" value="command-line.log4j.properties" />
                                
                <classpath refid="uportal-impl-full.classpath" />

                <arg value="${directoryArg}" />
                <arg value="${directory}" />

                <arg value="${channelArg}" />
                <arg value="${channel}" />
            </java>
        </uportal-impl-macro>
    </target>

    <target name="regchantype" description="Registers a new channel type">
        <uportal-impl-macro>
            <property name="class" value=" " />
            <property name="name" value=" " />
            <property name="description" value=" " />
            <property name="uri" value=" " />

            <echo message="Invoking RegisterChannelType" />
            <java dir="${basedir}" classname="org.jasig.portal.tools.RegisterChannelType">
                <classpath refid="uportal-impl-full.classpath" />

                <arg value="${class}" />
                <arg value="${name}" />
                <arg value="${description}" />
                <arg value="${uri}" />
            </java>
        </uportal-impl-macro>
    </target>
    
    <target name="crn-export" description="Exports the specified entity or entities to XML on the file system">
        <uportal-impl-macro>
            <!-- Three properties control the export:  dir, type, and sysid -->
            <fail unless="type">
                You must specify a &quot;type&quot; parameter (-Dtype={something}) from the following:  all, layout,
                all-layouts, channel, all-channels, all-permissions,  all-memberships, group, all-groups, user, 
                all-users.
            </fail>
                
            <property name="dir" value="." />
            <property name="sysid" value="" />

            <!-- Invoke Cernunnos specifying script and parameters -->
            <java fork="true" failonerror="true" dir="${basedir}" classname="org.danann.cernunnos.runtime.Main">
                <classpath refid="uportal-impl-full.classpath" />
                <arg value="classpath://org/jasig/portal/io/export.crn" />
                <arg value="${dir}" />
                <arg value="${type}" />
                <arg value="${sysid}" />
            </java>
        </uportal-impl-macro>
    </target>

    <target name="crn-import" description="Imports the specified XML file or files">
        <uportal-impl-macro>
            <!-- Two properties control the import:  dir and pattern -->
            <property name="dir" value="." />
            <property name="pattern" value="org.jasig.portal.FilePatternPhrase.USE_DEFAULT_VALUE "/>

            <!-- Invoke Cernunnos specifying script and parameters -->
            <java fork="true" failonerror="true" dir="${basedir}" classname="org.danann.cernunnos.runtime.Main">
                <classpath refid="uportal-impl-full.classpath" />
                <arg value="classpath://org/jasig/portal/io/import.crn" />
                <arg value="${dir}" />
                <arg value="${pattern}" />
            </java>
        </uportal-impl-macro>
    </target>

    <target name="crn-delete" description="Deletes the specified entity">
        <uportal-impl-macro>
            <fail unless="type">
                You must specify a &quot;type&quot; parameter (-Dtype={something}) from the following:  layout, channel,
                group, user.
            </fail>
            
            <fail unless="sysid">
                You must specify a &quot;sysid&quot; parameter (-Dsysid={something}).  The value will be a valid username
                (user or layout), fname (channel), or name (group).
            </fail>

            <!-- Invoke Cernunnos specifying script and parameters -->
            <java fork="true" failonerror="true" dir="${basedir}" classname="org.danann.cernunnos.runtime.Main">
                <classpath refid="uportal-impl-full.classpath" />
                <arg value="classpath://org/jasig/portal/io/delete.crn" />
                <arg value="${type}" />
                <arg value="${sysid}" />
            </java>
        </uportal-impl-macro>
    </target>

    <!-- TODO is this task needed? -->
    <target name="crn-make-data-xml" description="Runs the DbUnload tool against all tables listed in data.xml">
        <uportal-impl-macro>

            <!-- Invoke Cernunnos specifying script and parameters -->
            <java fork="true" failonerror="true" dir="${basedir}" classname="org.danann.cernunnos.runtime.Main">
                <classpath refid="uportal-impl-full.classpath" />
                <arg value="classpath://org/jasig/portal/tools/dbloader/dbunload.crn" />
            </java>
        </uportal-impl-macro>
    </target>
    
    <target name="clean" description="Removes the deployed uPortal from the container and runs 'mvn clean'">
        <uportal-parent-macro>
            <!-- Clean out uPortal from Tomcat -->
            <artifact:pom file="${uportal-war.dir}/pom.xml" id="uportal-war.pom" />
            <property name="destDir" value="${server.base}/webapps/${uportal-war.pom.build.finalName}" />
            <echo>Deleting '${destDir}'</echo>
            <delete dir="${destDir}" />
        </uportal-parent-macro>
        
        <!-- Execute the mvn clean lifecycle -->
        <antcall target="mvn">
            <param name="pomDir" value="${basedir}" />
            <param name="goal" value="clean" />
        </antcall>
    </target>

    <target name="deploy-ear" description="Deploy uPortal and dependent libraries and portlets to the servlet container">
        <uportal-ant-tasks-macro>
            <typedef resource="org/jasig/portal/ant/antlib.xml" uri="urn:up-util-ant">
                <classpath refid="uportal-ant-tasks-full.classpath" />
            </typedef>

            <uportal-ear-macro>
                <up:tomcatEarDeploy ear="${uportal-ear.artifact}" catalinaBase="${server.base}" extractWars="true" removeExistingDirectories="true" />
            </uportal-ear-macro>
        </uportal-ant-tasks-macro>
    </target>

    <target name="deploy-war" description="Deploy the uPortal web application to the servlet container">
        <uportal-war-macro>
            <basename property="war.contextname" file="${uportal-war.artifact}" suffix=".war" />
            <property name="destDir" value="${server.base}/webapps/${war.contextname}" />
            
            <mkdir dir="${destDir}" />
            <unwar dest="${destDir}" src="${uportal-war.artifact}" overwrite="true" />
        </uportal-war-macro>
    </target>

    <target name="deployPortletApp" description="Deploys a portlet application">
        <!-- Check arguments -->
        <fail message="'-DportletApp=[WAR File]' must be specified">
            <condition>
                <not>
                    <isset property="portletApp" />
                </not>
            </condition>
        </fail>
        <fail message="portletApp '${portletApp}' does not exist">
            <condition>
                <not>
                    <available file="${portletApp}" />
                </not>
            </condition>
        </fail>

        <!-- Default extractWar to true if it isn't set -->
        <condition property="extractWar" value="true">
            <not>
                <isset property="extractWar" />
            </not>
        </condition>

        <basename property="war.filename" file="${portletApp}" />
        <basename property="war.contextname" file="${portletApp}" suffix=".war" />
        <property name="destDir" value="${server.base}/webapps/${war.contextname}" />

        <condition property="existingDirectory" value="${destDir}">
            <istrue value="${removeExistingDirectory}" />
        </condition>
        <antcall target="deployPortletApp_removeExistingDirectory" />

        <condition property="extract" value="true">
            <istrue value="${extractWar}" />
        </condition>
        <antcall target="deployPortletApp_assembleAndExtract" />
        <antcall target="deployPortletApp_assembleDirect" />
    </target>

    <!-- Helper targets for the deployPortletApp target -->
    <target name="deployPortletApp_removeExistingDirectory" if="existingDirectory">
        <delete dir="${existingDirectory}" />
    </target>
    <target name="deployPortletApp_assembleAndExtract" if="extract" depends="setup-assembler">
        <property name="tempWarDir" value="${java.io.tmpdir}" />

        <assemblePortlet destdir="${tempWarDir}" war="${portletApp}" />

        <mkdir dir="${destDir}" />
        <unwar dest="${destDir}" src="${tempWarDir}/${war.filename}" overwrite="true" />

        <delete file="${tempWarDir}/${war.filename}" />
    </target>
    <target name="deployPortletApp_assembleDirect" unless="extract" depends="setup-assembler">
        <assemblePortlet destdir="${tomcat.webapps}" war="${portletApp}" />
    </target>

    <target name="md5passwd" description="Creates a user in the UP_PERSON_DIR table">
        <uportal-impl-macro>
            <property name="username" value=" " />

            <echo message="Invoking Md5Passwd" />
            <java dir="${basedir}" classname="org.jasig.portal.security.Md5Passwd">
                <classpath refid="uportal-impl-full.classpath" />

                <arg value="-c" />
                <arg value="${username}" />
            </java>
        </uportal-impl-macro>
    </target>

    <target name="deluser" description="Delete traces of a user from the portal database">
        <uportal-impl-macro>
            <property name="user" value=" " />

            <echo message="Invoking DeleteUser" />
            <java dir="${basedir}" classname="org.jasig.portal.tools.DeleteUser" fork="true">
                <classpath refid="uportal-impl-full.classpath" />

                <arg value="${user}" />
            </java>
        </uportal-impl-macro>
    </target>

    <target name="addstylesheet" description="Registers a new theme or structure">
        <uportal-impl-macro>
            <property name="stylesheetType" value=" " />
            <property name="stylesheetUri" value=" " />
            <property name="descriptionUri" value=" " />

            <echo message="Invoking RegisterStylesheet (add)" />
            <java dir="${basedir}" fork="true" classname="org.jasig.portal.tools.RegisterStylesheet">
                <classpath refid="uportal-impl-full.classpath" />

                <arg value="${stylesheetType}" />
                <arg value="${stylesheetUri}" />
                <arg value="${descriptionUri}" />
            </java>
        </uportal-impl-macro>
    </target>

    <target name="modstylesheet" description="Modifies an existing theme or structure">
        <uportal-impl-macro>
            <property name="stylesheetType" value=" " />
            <property name="stylesheetUri" value=" " />
            <property name="descriptionUri" value=" " />
            <property name="stylesheetId" value=" " />

            <echo message="Invoking RegisterStylesheet (modify)" />
            <java dir="${basedir}" fork="true" classname="org.jasig.portal.tools.RegisterStylesheet">
                <classpath refid="uportal-impl-full.classpath" />

                <arg value="${stylesheetType}" />
                <arg value="-u" />
                <arg value="${stylesheetUri}" />
                <arg value="${descriptionUri}" />
                <arg value="${stylesheetId}" />
            </java>
        </uportal-impl-macro>
    </target>

    <target name="delstylesheet" description="Deletes an existing theme or structure">
        <uportal-impl-macro>
            <property name="stylesheetType" value=" " />
            <property name="stylesheetId" value=" " />

            <echo message="Invoking RegisterStylesheet (delete)" />
            <java dir="${basedir}" classname="org.jasig.portal.tools.RegisterStylesheet">
                <classpath refid="uportal-impl-full.classpath" />

                <arg value="${stylesheetType}" />
                <arg value="-d" />
                <arg value="${stylesheetId}" />
            </java>
        </uportal-impl-macro>
    </target>

    <target name="hsql" description="Start a HSQLDB instance consistent with the default RDBMS requirements of uPortal">
        <property name="spawn" value="false" />
        
        <condition property="failonerror" value="false">
            <equals arg1="${spawn}" arg2="true" />
        </condition>
        <property name="failonerror" value="true" />
            
        <uportal-parent-macro>
            <artifact:dependencies pathid="hsql.classpath" verbose="false">
                <pom file="${bootstrap.dir}/hsqldb-pom.xml" />
            </artifact:dependencies>
    
            <property name="database" value="${basedir}/data/uP3_uPortal" />
            <property name="port" value="8887" />
    
            <echo message="Starting HSQL" />
            <echo message="Using: ${database}" />
            <java fork="true" spawn="${spawn}"  maxmemory="16M" dir="${basedir}" classname="org.hsqldb.Server" failonerror="${failonerror}">
                <classpath refid="hsql.classpath" />
    
                <arg value="-database" />
                <arg value="${database}" />
                <arg value="-port" />
                <arg value="${port}" />
            </java>
        </uportal-parent-macro>
    </target>
    
    <target name="hsql-shutdown" description="Compacts then cleanly shuts down hsql, useful if the 'hsql' task was run with '-Dspawn=true'">
        <uportal-parent-macro>
            <artifact:dependencies pathid="hsql.classpath" verbose="false">
                <pom file="${bootstrap.dir}/hsqldb-pom.xml" />
            </artifact:dependencies>
    
            <echo message="Stopping HSQL" />
            <trycatch reference="hsql-shutdown.exceptionId">
                <try>
                    <java fork="true" maxmemory="8M" dir="${basedir}" classname="org.hsqldb.util.SqlTool" timeout="5000" errorproperty="hsql-shutdown.err.out" failonerror="true">
                        <classpath refid="hsql.classpath" />
                        
                        <arg value="--rcFile" />
                        <arg value="${bootstrap.dir}/hsqldb.sqltool.rc" />
                        <arg value="--sql" />
                        <arg value="shutdown compact" />
                        <arg value="uPortalDb" />
                    </java>
                </try>
                <catch>
                    <if>
                        <contains string="${hsql-shutdown.err.out}" substring="java.sql.SQLException: socket creation error" />
                        <then>
                            <echo>HSQL is not running</echo>
                        </then>
                        <else>
                            <echo>${jvm.err.out}</echo>
                            <throw refid="hsql-shutdown.exceptionId" />
                        </else>
                    </if>
                </catch>
            </trycatch>
        </uportal-parent-macro>
    </target>

    <!-- ============================== Deprecated Targets ============================== -->
    <target name="all">
        <echo>The "all" Ant task is no supported. Run 'mvn clean compile' for the same result.</echo>
    </target>
    <target name="compile">
        <echo>The "compile" Ant task is no supported. Run 'mvn compile' for the same result.</echo>
    </target>
    <target name="compiletests">
        <echo>The "compiletests" Ant task is no supported. Run 'mvn test-compile' for the same result.</echo>
    </target>
    <target name="deploy">
        <echo>The "deploy" Ant task is no supported. Run 'ant deploy-war' for the same result.</echo>
    </target>
    <target name="dist">
        <echo>The "dist" Ant task is no supported. Run 'mvn package site' for a similar result.</echo>
    </target>
    <target name="javadoc">
        <echo>The "javadoc" Ant task is no supported. Run 'mvn javadoc:javadoc' for the same result.</echo>
    </target>
    <target name="runtests">
        <echo>The "runtests" Ant task is no supported. Run 'mvn test' for the same result.</echo>
    </target>


    <!-- ============================== Maven Support Macros ============================== -->
    
    <!--
     | Macro that simply calls the install-root-pom target using an 'ant' task instead of the
     | 'antcall' task to ensure the Maven tasks aren't tainted by a failed loading of the parent
     | pom.
     +-->
    <macrodef name="uportal-parent-macro">
        <element name="sub-tasks" optional="false" implicit="true" />
        <sequential>
            <!--
             | Called via the <ant> task so the install happens in a different classloader. This
             | is required so an initial install which is missing jasig-parent doesn't cause problems
             | later due to the failed load of jasig-parent being cached.  
             +-->
            <ant antfile="${basedir}/build.xml" target="install-parent-pom" />

            <sub-tasks />
        </sequential>
    </macrodef>
    
    <target name="install-parent-pom">
        <artifact:pom file="${basedir}/pom.xml" id="uportal-parent.pom" />
        <artifact:install file="${basedir}/pom.xml" pomrefid="uportal-parent.pom" />
    </target>
    
    <!--
     | Macro for tasks involving a maven project. The macro loads the pom, creates a classpath,
     | ensures the project artifact is up-to-date, and runs the <sub-tasks> element. If the
     | artifact is not up-to-date the <pre-package> element can be used to add behavior before
     | 'mvn package' is called on the project.
     |
     | The following are available in the pre-package and sub-tasks elements:
     | pom object   - @{project-name}.pom       - The Maven POM object for the project
     | property     - @{project-name}.artifact  - The full path to the final artifact
     | path         - @{project-name}.classpath - The projects classpath not including the artifact
     +-->
    <macrodef name="maven-artifact-macro">
        <attribute name="project-name" />
        <attribute name="project-path" />
        <attribute name="checkFilesId" default="null" />

        <element name="sub-tasks" optional="true" implicit="true" />

        <sequential>
            <!--
             | Load the pom & classpath
             +-->
            <artifact:pom file="@{project-path}/pom.xml" id="@{project-name}.pom" />
            <artifact:dependencies pathid="@{project-name}.classpath" verbose="false">
                <pom refid="@{project-name}.pom" />
            </artifact:dependencies>

            <!--
             | Define the location of the resulting artifact
             +-->
            <property name="@{project-name}.artifact" value="${@{project-name}.pom.build.directory}/${@{project-name}.pom.build.finalName}.${@{project-name}.pom.packaging}" />

            <!--
             | Parse out the target directory without the preceding project path
             +-->
            <length property="@{project-name}.path.length" string="@{project-path}/" />
            <propertyregex property="@{project-name}.build.directory" input="${@{project-name}.pom.build.directory}" regexp=".{${@{project-name}.path.length}}(.*)" select="\1" />

            <!--
             | Do uptodate checking for project files and dependencies
             +-->
            <uptodate property="@{project-name}.projectFilesUTD" targetfile="${@{project-name}.artifact}">
                <srcfiles dir="@{project-path}" defaultexcludes="true">
                    <exclude name="${@{project-name}.build.directory}/" />
                </srcfiles>
            </uptodate>
            <if>
                <not>
                    <equals arg1="@{checkFilesId}" arg2="null" />
                </not>
                <then>
                    <uptodate property="@{project-name}.dependenciesUTD" targetfile="${@{project-name}.artifact}">
                        <srcfiles refid="@{checkFilesId}" />
                    </uptodate>
                </then>
                <else>
                    <property name="@{project-name}.dependenciesUTD" value="true" />
                </else>
            </if>

            <!--
             | Call 'mvn package' if files in the project are not up-to-date
             +-->
            <if>
                <not>
                    <and>
                        <equals arg1="${@{project-name}.projectFilesUTD}" arg2="true" />
                        <equals arg1="${@{project-name}.dependenciesUTD}" arg2="true" />
                    </and>
                </not>
                <then>
                    <echo message="Artifact '${@{project-name}.artifact}' is not available or out-of-date, calling 'mvn install'" />

                    <antcall target="mvn">
                        <param name="pomDir" value="@{project-path}" />
                        <param name="goal" value="install" />
                    </antcall>
                </then>
                <else>
                    <echo message="Artifact '${@{project-name}.artifact}' is up-to-date" />
                    <artifact:install file="${@{project-name}.artifact}" pomrefid="@{project-name}.pom" />
                </else>
            </if>

            <!--
             | Execute the sub-tasks
             +-->
            <sub-tasks />
        </sequential>
    </macrodef>

    <!--
     | Provides a wrapper for tasks that need a classpath that includes the uPortal source
     | and all of its dependencies. The task also ensures the uportal-impl JAR exists and
     | is up to date.
     |
     | The following are available in the impl-sub-tasks element:
     | pom object   - uportal-impl.pom                      - The Maven POM object for the uportal-impl pom
     | property     - uportal-impl.artifact                 - The full path to the uportal-impl JAR
     | path         - uportal-impl.classpath                - The uportal-impl classpath not including the uportal-impl JAR
     | path         - uportal-impl-full.classpath           - The uportal-impl classpath including the uportal-impl JAR
     +-->
    <macrodef name="uportal-impl-macro">
        <element name="impl-sub-tasks" optional="false" implicit="true" />

        <sequential>
            <uportal-parent-macro>
                <maven-artifact-macro project-name="uportal-impl" project-path="${uportal-impl.dir}">
                    <!--
                     | Include the uportal-impl JAR in the final classpath
                     +-->
                    <path id="uportal-impl-full.classpath">
                        <path refid="uportal-impl.classpath" />
                        <pathelement location="${uportal-impl.artifact}" />
                    </path>
    
                    <!--
                     | Execute the impl-sub-tasks
                     +-->
                    <impl-sub-tasks />
                </maven-artifact-macro>
            </uportal-parent-macro>
        </sequential>
    </macrodef>

    <!--
     | Provides a wrapper for tasks that need a classpath that includes all of the uPortal WAR
     | dependencies. The task also ensures the uportal-war WAR exists and is up to date.
     |
     | The following are available in the war-sub-tasks element:
     | properties from the uportal-impl-macro macrodef
     | pom object   - uportal-war.pom                       - The Maven POM object for the uportal-war pom
     | property     - uportal-war.artifact                  - The full path to the uportal-war WAR
     | path         - uportal-war.classpath                 - The uportal-war classpath not including the uportal-war WAR
     +-->
    <macrodef name="uportal-war-macro">
        <element name="war-sub-tasks" optional="false" implicit="true" />

        <sequential>
            <uportal-impl-macro>
                <fileset id="uportal-impl-artifacts" file="${uportal-impl.artifact}" />
                <maven-artifact-macro project-name="uportal-war" project-path="${uportal-war.dir}" checkfilesid="uportal-impl-artifacts">
                    <!--
                     | Execute the war-sub-tasks
                     +-->
                    <war-sub-tasks />
                </maven-artifact-macro>
            </uportal-impl-macro>
        </sequential>
    </macrodef>

    <!--
     | Provides a wrapper for tasks that depend on the portlet overlays being installed and up-to-date.
     |
     | No properties are set for the overlay-sub-tasks element.
     +-->
    <macrodef name="uportal-portlets-overlay-macro">
        <element name="overlay-sub-tasks" optional="false" implicit="true" />

        <sequential>
            <uportal-parent-macro>
                <!--
                 | Install the overlay parent project pom
                 +-->
                <artifact:pom file="${uportal-portlets-overlay.dir}/pom.xml" id="uportal-portlets-overlay.pom" />
                <artifact:install file="${uportal-portlets-overlay.dir}/pom.xml" pomrefid="uportal-portlets-overlay.pom" />
                
                <!--
                 | Iterate over the child projects and run the artifact macro on each of them
                 +-->
                <for param="portlet-overlay-dir">
                    <path>
                        <dirset dir="${uportal-portlets-overlay.dir}">
                            <include name="*"/>
                        </dirset>
                    </path>
                    <sequential>
                        <basename file="@{portlet-overlay-dir}" property="@{portlet-overlay-dir}-name" />
                        <maven-artifact-macro project-name="${@{portlet-overlay-dir}-name}" project-path="@{portlet-overlay-dir}" />
                    </sequential>
                </for>
                
                <!--
                 | Execute the overlay-sub-tasks
                 +-->
                <overlay-sub-tasks />
            </uportal-parent-macro>
        </sequential>
    </macrodef>
    
    <!--
     | Provides a wrapper for tasks that need a classpath that includes all of the uPortal EAR
     | dependencies. The task also ensures the uportal-ear EAR exists and is up to date.
     |
     | The following are available in the ear-sub-tasks element:
     | properties from the uportal-war-macro macrodef
     | pom object   - uportal-ear.pom               - The Maven POM object for the uportal-ear pom
     | property     - uportal-ear.artifact          - The full path to the uportal-ear EAR
     | path         - uportal-ear.classpath         - The uportal-ear classpath not including the uportal-ear EAR
     +-->
    <macrodef name="uportal-ear-macro">
        <element name="ear-sub-tasks" optional="false" implicit="true" />

        <sequential>
            <uportal-war-macro>
                <fileset id="uportal-war-artifacts" file="${uportal-war.artifact}" />
                
                <uportal-portlets-overlay-macro>
                    <maven-artifact-macro project-name="uportal-ear" project-path="${uportal-ear.dir}" checkfilesid="uportal-war-artifacts">
                        <!--
                         | Execute the ear-sub-tasks
                         +-->
                        <ear-sub-tasks />
                    </maven-artifact-macro>
                </uportal-portlets-overlay-macro>
            </uportal-war-macro>
        </sequential>
    </macrodef>

    <!--
     | Provides a wrapper for tasks that need a classpath that includes the uPortal ear deployer
     | and all of its dependencies. The task also ensures the uportal-impl JAR exists and
     | is up to date.
     |
     | The following are available in the ear-deployer-sub-tasks element:
     | pom object   - uportal-ear-deployer.pom              - The Maven POM object for the uportal-ear-deployer pom
     | property     - uportal-ear-deployer.artifact         - The full path to the uportal-ear-deployer JAR
     | path         - uportal-ear-deployer.classpath        - The uportal-ear-deployer classpath not including the uportal-ear-deployer JAR
     | path         - uportal-ear-deployer-full.classpath   - The uportal-impl classpath including the uportal-impl JAR
     +-->
    <macrodef name="uportal-ear-deployer-macro">
        <element name="ear-deployer-sub-tasks" optional="false" implicit="true" />

        <sequential>
            <uportal-parent-macro>
                <maven-artifact-macro project-name="uportal-ear-deployer" project-path="${uportal-ear-deployer.dir}">
                    <!--
                     | Include the uportal-ear-deployer JAR in the final classpath
                     +-->
                    <path id="uportal-ear-deployer-full.classpath">
                        <path refid="uportal-ear-deployer.classpath" />
                        <pathelement location="${uportal-ear-deployer.artifact}" />
                    </path>
    
                    <!--
                     | Execute the ear-deployer-sub-tasks
                     +-->
                    <ear-deployer-sub-tasks />
                </maven-artifact-macro>
            </uportal-parent-macro>
        </sequential>
    </macrodef>

    <!--
     | Provides a wrapper for tasks that need a classpath that includes all of the uPortal WAR
     | dependencies. The task also ensures the uportal-war WAR exists and is up to date.
     |
     | The following are available in the war-sub-tasks element:
     | properties from the uportal-ear-deployer-macro macrodef
     | pom object   - uportal-ant-tasks.pom                 - The Maven POM object for the uportal-ant-tasks pom
     | property     - uportal-ant-tasks.artifact            - The full path to the uportal-ant-tasks JAR
     | path         - uportal-ant-tasks.classpath           - The uportal-ant-tasks classpath not including the uportal-ant-tasks WAR
     | path         - uportal-ant-tasks-full.classpath      - The uportal-ant-tasks classpath including the uportal-ant-tasks JAR
     +-->
    <macrodef name="uportal-ant-tasks-macro">
        <element name="ant-tasks-sub-tasks" optional="false" implicit="true" />

        <sequential>
            <uportal-ear-deployer-macro>
                <fileset id="uportal-ear-deployer-artifacts" file="${uportal-ear-deployer.artifact}" />
                <maven-artifact-macro project-name="uportal-ant-tasks" project-path="${uportal-ant-tasks.dir}" checkfilesid="uportal-ear-deployer-artifacts">
                    <!--
                     | Include the uportal-ear-deployer JAR in the final classpath
                     +-->
                    <path id="uportal-ant-tasks-full.classpath">
                        <path refid="uportal-ant-tasks.classpath" />
                        <pathelement location="${uportal-ant-tasks.artifact}" />
                    </path>

                    <!--
                     | Execute the ant-tasks-sub-tasks
                     +-->
                    <ant-tasks-sub-tasks />
                </maven-artifact-macro>
            </uportal-ear-deployer-macro>
        </sequential>
    </macrodef>
    
    <!--
     | Utility target for executing a maven with some number (up to 10) of goals. The
     | target should automaticly work on all OSs as long as 'mvn' is on the path.
     +-->
    <target name="mvn">
        <property name="goal" value="" />
        <property name="goal1" value="" />
        <property name="goal2" value="" />
        <property name="goal3" value="" />
        <property name="goal4" value="" />
        <property name="goal5" value="" />
        <property name="goal6" value="" />
        <property name="goal7" value="" />
        <property name="goal8" value="" />
        <property name="goal9" value="" />

        <if>
            <os family="windows" />
            <then>
                <property name="mvnExecutable" value="mvn.bat" />
            </then>
            <else>
                <property name="mvnExecutable" value="mvn" />
            </else>
        </if>
        
        <condition property="maven.bin" value="${maven.home}/bin/">
            <isset property="maven.home"/>
        </condition>
        <property name="maven.bin" value="" />

        <exec executable="${maven.bin}${mvnExecutable}" dir="${pomDir}" vmlauncher="true" resolveexecutable="true" searchpath="true" failonerror="true">
            <arg value="${goal}" />
            <arg value="${goal1}" />
            <arg value="${goal2}" />
            <arg value="${goal3}" />
            <arg value="${goal4}" />
            <arg value="${goal5}" />
            <arg value="${goal6}" />
            <arg value="${goal7}" />
            <arg value="${goal8}" />
            <arg value="${goal9}" />
        </exec>
    </target>


    <!-- ============================== Ant Extensions ============================== -->

    <target name="setup-assembler">
        <uportal-parent-macro>
            <artifact:dependencies pathid="pluto-ant" verbose="false">
                <pom file="${bootstrap.dir}/pluto-assembler-pom.xml" />
            </artifact:dependencies>
    
            <taskdef classname="org.apache.pluto.ant.AssembleTask" name="assemblePortlet">
                <classpath>
                    <path refid="pluto-ant" />
                </classpath>
            </taskdef>
        </uportal-parent-macro>
    </target>
</project>
