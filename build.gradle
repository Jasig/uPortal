description = "Apereo uPortal $version"

// Build Scans provide detailed information about many aspects of your
// build right in your browser.  (https://scans.gradle.com/plugin)
apply plugin: 'com.gradle.build-scan'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: me.champeau.gradle.buildscans.RecipesPlugin
apply plugin: 'java'
apply plugin: 'build-announcements'
apply plugin: 'org.standardout.versioneye'

// Adds support for Node.js scripts
apply plugin: 'com.moowork.node'

/*======== Dependency Management ========**/
repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
}

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        jcenter()
        mavenLocal()
    }
    dependencies {
        classpath 'com.gradle:build-scan-plugin:1.7.4'
        classpath 'com.moowork.gradle:gradle-node-plugin:0.13'
        classpath 'gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.6'
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.10'
        classpath 'com.netflix.nebula:gradle-lint-plugin:latest.release'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.1'
        classpath 'me.champeau.gradle:buildscan-recipes-plugin:0.2.0'
        classpath 'org.standardout:gradle-versioneye-plugin:1.4.0'
    }
}

node {
    version = '8.0.0'
    download = true
}

/*======== Static Analysis ========*/
buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}
buildScanRecipes {
    recipes 'travis-ci', 'git-commit'
}

versioneye {
  includeSubProjects = true
  exclude project.configurations.findAll { !it.canBeResolved }*.name as String[]
}

allprojects {
    apply plugin: 'jacoco'
    apply plugin: 'nebula.lint'

    gradleLint.criticalRules = [
      'overridden-dependency-version',
      'dependency-parentheses',
      'dependency-tuple',
      'empty-closure',
      'duplicate-dependency-class'
    ]
}

/*======== Child Projects ========*/
subprojects {

    /*======== Plugins ========*/
    apply plugin: 'com.github.sherter.google-java-format'
    apply plugin: 'eclipse'
    apply plugin: 'findbugs'
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.sherter.google-java-format'
    apply plugin: 'net.ltgt.errorprone'


    /*======== Dependency Management ========**/
    repositories {
        mavenLocal()
        mavenCentral()
    }

    configurations {
        // Banned dependencies
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        all*.exclude group: 'commons-logging', module: 'commons-logging-api'
        all*.exclude group: 'log4j', module: 'log4j'
    }

    dependencies {
        testCompile("junit:junit:${junitVersion}") {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }
        testCompile "org.easymock:easymock:${easymockVersion}"
        testCompile "org.hamcrest:hamcrest-all:${hamcrestVersion}"
        testCompile "org.mockito:mockito-core:${mockitoVersion}"
        testCompile "org.springframework:spring-test:${springVersion}"
        testCompile "xmlunit:xmlunit:${xmlunitVersion}"
    }

    /* Release Management
     *
     * Based on Sonatype's guide for publishing w/ Gradle:  http://central.sonatype.org/pages/gradle.html
     */
    ext {
        publishingUsername = project.hasProperty('ossrhUsername') ? project.getProperty('ossrhUsername') : ""
        publishingPassword = project.hasProperty('ossrhPassword') ? project.getProperty('ossrhPassword') : ""
    }
    signing {
        required { gradle.taskGraph.hasTask('uploadArchives') }
        sign configurations.archives
    }
    tasks.withType(Javadoc) {
        // FIXME: Fix errors rather than supressing them
        failOnError = false
    }
    tasks.withType(Jar) {
        from(project.projectDir) {
            include "${rootDir}/LICENSE"
            into 'META-INF'
        }
    }
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
    artifacts {
        archives javadocJar, sourcesJar
    }
    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
    }
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: publishingUsername, password: publishingPassword)
                }

                pom.project {
                    name 'uPortal'
                    packaging 'jar'
                    // optionally artifactId can be defined here
                    description 'Enterprise open source portal built by and for the higher education community.'
                    url 'https://github.com/Jasig/uPortal'

                    scm {
                        connection 'scm:git@github.com:Jasig/uPortal.git'
                        url 'https://github.com/Jasig/uPortal'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            organization 'uPortal Developers'
                            organizationUrl 'https://github.com/Jasig/uPortal/graphs/contributors'
                        }
                    }
                }
            }
        }
    }

    /*======== Static Analysis ========*/
    findbugs {
        toolVersion = '3.0.1'
        ignoreFailures = true
    }
    tasks.withType(FindBugs) {
        enabled = gradle.startParameter.taskNames.contains(it.name)
    }
    googleJavaFormat {
        toolVersion '1.3'
        options style: 'AOSP'
    }
}

task jacocoAggregateReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        xml.enabled = true
        html.enabled = true
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoAggregateReport/jacocoAggregateReport.xml"
    sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
}
