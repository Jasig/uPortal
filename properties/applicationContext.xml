<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>
	<!--
	 | The default application context for uPortal. Other spring configurations
	 | should be added to the list in beanRefFactory.xml if they have beans that need to be avalable
	 | in the uPortal application context.
	 +-->
	 
	<!--
	  | Here we define additional startup checks.  These are in addition to hard-coded checks that
	  | are intended to detect problems that would prevent us from reading in and using these 
	  | configurable checks.
	  |
	  | This bean is lazy-init so that it will not be instantiated by Spring
	  | unless actually needed.  This reduces the chance that a broken checks
	  | configuration, or one that depends on resources that are unavailable
	  | (such as JNDI resources outside the context of a JNDI container) 
	  | will not break the use of a uPortal administrative tool / break a 
	  | uPortal deployment.
	  |
	  +-->
	<bean id='checkRunner' 
	    class="org.jasig.portal.tools.checks.BasicCheckRunner"
	    lazy-init="true">
		<property name="checks">
			<list>
				
				<!--
				  | Check that a bean named personAttributeDao of type
				  | IPersonAttributeDao is available via the PortalApplicationContextFacade.
				  +-->
				<bean class="org.jasig.portal.tools.checks.SpringBeanCheck">
					<!-- We are checking for the Spring-configured bean named "personAttributeDao". -->
					<constructor-arg index="0" type="java.lang.String">
						<value>personAttributeDao</value>
					</constructor-arg>
					<!-- We are checking that that bean is an instanceof this class. -->
					<constructor-arg index="1" type="java.lang.String">
						<value>org.jasig.portal.services.persondir.IPersonAttributeDao</value>
					</constructor-arg>
				</bean>
				
				<!--
				  | Check for a class that will only be present in JAXP 1.3 is present.
				  | We attempt with this check to catch and assist deployers who neglect to
				  | make the JAXP 1.3 jars available in a JDK 1.4 environment.
				  | This is the runtime equivalent of the Ant-build-time invocation of LibCheck.
				  +-->
				<bean class="org.jasig.portal.tools.checks.XalanVersionCheck">
					<constructor-arg index="0" type="java.lang.String">
						<value>Xalan Java 2.6.0</value>
					</constructor-arg>
				</bean>
				
				<!--
				  | Check for a class that will only be present if JAXP 1.3 is present.
				  | We attempt with this check to catch and assist deployers who neglect to
				  | make the JAXP 1.3 jars available in a JDK 1.4 environment.
				  | This is the runtime equivalent of the Ant-build-time invocation of LibCheck.
				  +-->
				<bean class="org.jasig.portal.tools.checks.JaxpCheck"/>
				
				<!--
				  | Check for a method that will only be present if the org.w3c.dom API that is is present
				  | is DOM level 3.
				  | We attempt with this check to catch and assist deployers who neglect to
				  | make the JAXP 1.3 jars available in a JDK 1.4 environment.
				  | 
                  | This check is largely redundant with the JaxpCheck.
				  +-->
				<bean class="org.jasig.portal.tools.checks.Dom3Check"/>
				
				<!--
				  | Include the time at which the checks were run in the check result reporting.
				  +-->
				<bean class="org.jasig.portal.tools.checks.TimeCheck"/>
				
			</list>
		</property>
	</bean>
	
	<!--
	  | Here we define the IThrowableToElement that will map fom Throwables that channels throw
	  | to XML Elements that become part of the XML input to the XSLT that CError uses to render
	  | messages about failed channels.
	  +-->
	<bean id="throwableToElement" class="org.jasig.portal.channels.error.error2xml.DelegatingThrowableToElement">
		<property name="throwableToElements">
			<list>
				<!-- 
				  | This is a list from most specific to most general handling of Throwables.  
				  | The DelegatingThrowableToElement implementation is to iterate over this list until it finds a 
				  | mapping that is willing to translate the Throwable we're trying to handle.
				  | 
				  | In order to add a custom CError message for some particular exception that requires information
				  | from that exception, what you do is write an
				  | IThrowableToElement implementation which produces the XML Element conveying the
				  | exception's information and then edit the XSLTs that CError uses to render to read that
				  | information from the Document and use it.
				  | 
				  | If just the classname is sufficient, you can switch in the XSLT on the classname set by
				  | the generic ThrowableToElement handler.
				  +-->
				<bean class="org.jasig.portal.channels.error.error2xml.ResourceMissingExceptionToElement"/>
				<bean class="org.jasig.portal.channels.error.error2xml.InternalTimeoutExceptionToElement"/>
				<bean class="org.jasig.portal.channels.error.error2xml.AuthorizationExceptionToElement"/>
				<bean class="org.jasig.portal.channels.error.error2xml.ThrowableToElement"/>
			</list>
		</property>
	</bean>
	
</beans>