<!--

    Licensed to Jasig under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Jasig licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License. You may obtain a
    copy of the License at:

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on
    an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied. See the License for the
    specific language governing permissions and limitations
    under the License.

-->

<!--
 | NOTICE:  This file represents a contractual API that is leveraged by more 
 | than one caller.  Please do not refactor this file in a way that changes 
 | the number or nature of arguments expected.
 |
 | These are:
 |   - ${Attributes.NODE}=XML Element that defines the entity to import
 |   - ${PORTAL_CONTEXT}=uPortal's Spring ApplicationContext
 |   - ${SqlAttributes.DATA_SOURCE}=the DataSource for the PortalDb
 |   - ${SqlAttributes.TRANSACTION_MANAGER}=PlatformTransactionManager in use
 |
 | To debug, change log.debug to log.error (script classname is dynamic; e.g. Script1, Script 13, etc.)
 +-->
<!-- Group membership processing is done in two steps in an initdb.  All groups are created in one pass.
     In a second pass, the child elements are processed because they can reference the now-created groups. -->
<choose>
    <when test="${jexl(IMPORT_ACTION.equals('GROUP'))}">
        <with>
            <attribute key="ENTITY_TYPE">${valueOf(entity-type)}</attribute>
            <attribute key="GROUP_NAME">${valueOf(name)}</attribute>
            <attribute key="CREATOR">${valueOf(creator)}</attribute>
            <attribute key="DESCRIPTION">${valueOf(description)}</attribute>
            <subtasks>
                <groovy>
                    <script>
                        import org.jasig.portal.groups.IEntityGroup
                        import org.jasig.portal.groups.IGroupConstants
                        import org.jasig.portal.groups.IGroupMember
                        import org.jasig.portal.io.GetMemberKeyPhrase
                        import org.jasig.portal.io.GetMemberServicePhrase
                        import org.jasig.portal.services.GroupService
                        import org.slf4j.LoggerFactory

                        def log = LoggerFactory.getLogger(this.getClass());
                        IEntityGroup group;
                        def groupKeyArray = GroupService.searchForGroups(GROUP_NAME, IGroupConstants.IS, Class.forName(ENTITY_TYPE))

                        switch (groupKeyArray.length) {
                            case 0:
                                log.debug("Creating new group $GROUP_NAME")
                                group = GroupService.newGroup(Class.forName(ENTITY_TYPE))
                                group.setName(GROUP_NAME);
                                break;
                            case 1:
                                log.debug("Found existing group $GROUP_NAME")
                                group = GroupService.findGroup(groupKeyArray[0].key)
                                break;
                            default:
                                throw new RuntimeException("Found $groupKeyArray.length groups with name GROUP_NAME. Can only have 1");
                         }

                        group.setCreatorID(CREATOR)
                        group.setDescription(DESCRIPTION)
                        group.update()
                    </script>
                </groovy>
            </subtasks>
        </with>
    </when>
    <when test="${jexl(IMPORT_ACTION.equals('MEMBERS'))}">
        <with>
            <attribute key="GROUP_NAME">${valueOf(name)}</attribute>
            <attribute key="ENTITY_TYPE">${valueOf(entity-type)}</attribute>
            <subtasks>
                <with>
                    <attribute key="group">${groovy(org.jasig.portal.services.GroupService.findGroup(org.jasig.portal.services.GroupService.searchForGroups(GROUP_NAME, org.jasig.portal.groups.IGroupConstants.IS, Class.forName(ENTITY_TYPE))[0].key))}</attribute>
                    <subtasks>
                        <groovy>
                            <script>
                                import org.slf4j.LoggerFactory
                                def log = LoggerFactory.getLogger(this.getClass());
                                log.debug("Removing members from group $group")
                                group.getMembers().each() {group.removeMember(it)}
                            </script>
                        </groovy>
                        <node-iterator xpath="children/*">
                            <groovy>
                                <script>
                                    import org.jasig.portal.groups.IEntityGroup
                                    import org.jasig.portal.groups.IGroupConstants
                                    import org.jasig.portal.groups.IGroupMember
                                    import org.jasig.portal.io.GetMemberIsGroupPhrase
                                    import org.jasig.portal.io.GetMemberKeyPhrase
                                    import org.jasig.portal.io.GetMemberServicePhrase
                                    import org.jasig.portal.services.GroupService
                                    import org.slf4j.LoggerFactory

                                    def log = LoggerFactory.getLogger(this.getClass());
                                    String groupService = GetMemberServicePhrase.getPhrase(Attributes.NODE.getName(), Attributes.NODE.getText())
                                    String memberId = GetMemberKeyPhrase.getPhrase(Attributes.NODE.getName(), Attributes.NODE.getText())
                                    log.debug("Found service=$groupService, memberId=$memberId")

                                    if (GetMemberIsGroupPhrase.phraseIsGroup(Attributes.NODE.getName())) {
                                        String key = groupService + '.' + memberId;
                                        log.debug("Created key $key")
                                        IEntityGroup member = GroupService.findGroup(key)
                                        log.debug("Adding group $member")
                                        group.addMember(member);
                                    } else {
                                        IGroupMember member = GroupService.getGroupMember(memberId, Class.forName(ENTITY_TYPE))
                                        log.debug("Adding entity $member")
                                        group.addMember(member);
                                    }
                                </script>
                            </groovy>
                        </node-iterator>
                        <groovy>
                            <script>
                                group.updateMembers();
                            </script>
                        </groovy>
                    </subtasks>
                </with>
            </subtasks>
        </with>
    </when>
</choose>